{
  "swagger": "2.0",
  "info": {
    "description": "This is the API specification of the Student Management Backend - Event Service project of Green Fox Academy's Húlí. Find the [project description here](https://github.com/greenfox-academy/Huli/blob/master/projects/student-management-event-service.md).",
    "version": "1.0.0",
    "title": "Optimus Prime - Event Service",
    "contact": {
      "email": "peter.tamas@greenfoxacademy.com"
    }
  },
  "host": "dunnoyet.com",
  "basePath": "/",
  "tags": [
    {
      "name": "events",
      "description": "Events"
    },
    {
      "name": "templates",
      "description": "Templates"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get events",
        "description": "Get events filtered by query parameters. All the following query parameters are optional and can be combined to complete more sophisticated queries.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "cohort",
            "in": "query",
            "description": "Filter the events that are assigned to the given cohort. E.g.: `GET /events?cohort=Pallida` responses only the events that belong to the Pallida cohort.",
            "required": false,
            "type": "string"
          },
          {
            "name": "course",
            "in": "query",
            "description": "Filter the events that are assigned to the given course. E.g.: `GET /events?course=Software` responses only the events that belong to the Software courses.",
            "required": false,
            "type": "string"
          },
          {
            "name": "class",
            "in": "query",
            "description": "Filter the events that are assigned to the given class. E.g.: `GET /events?class=Alpaga` responses only the events that belong to the Alpaga class.",
            "required": false,
            "type": "string"
          },
          {
            "name": "team",
            "in": "query",
            "description": "Filter the events that are assigned to the given project team. E.g.: `GET /events?team=Kryptonite` responses only the events that belong to the Alpaga class.",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date of filtering events in YYYY-MM-DD format",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date of filtering events in YYYY-MM-DD format",
            "required": false,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Event"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Create a new event",
        "description": "Create a new event.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The properties of the new event. If the `endsAt` property is missing in the JSON model, the event considered as a whole day event.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RespDTO"
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get an event",
        "description": "Get an event by its ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "put": {
        "tags": [
          "events"
        ],
        "summary": "Modify an event",
        "description": "Modify an event with the given ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The event properties that need to be modified. At least one of these properties should be given in the `body` of the request. The properties that are not appeared in the request keep their values.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RespDTO"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "events"
        ],
        "summary": "Delete an event",
        "description": "Delete an event by its ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the event.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RespDTO"
            }
          }
        }
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get the template events of a given type",
        "description": "Get templates description",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The type of the template events. E.g.: `GET /templates?type=cohort` responses with all the cohort template events.\nThe available event types can be fetched on `GET /templates/types`.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TemplateEvent"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "templates"
        ],
        "summary": "Create a new template event",
        "description": "Create a new template event.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The properties of the new template event. If the `startsAt` or `endsAt` property is missing, the event considered as a whole day event.\nThe remaining parameters are required for the successfull template event creation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewTemplateEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RespDTO"
            }
          }
        }
      }
    },
    "/templates/{templateEventId}": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get a template event",
        "description": "Get a template event by its ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "templateEventId",
            "in": "path",
            "description": "The ID of the template event.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/TemplateEvent"
            }
          }
        }
      },
      "put": {
        "tags": [
          "templates"
        ],
        "summary": "Modify a template event",
        "description": "Modify a template event with the given ID.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "templateEventId",
            "in": "path",
            "description": "The ID of the template event.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The template event properties that need to be modified.\nAt least one of these properties should be given in the `body` of the request. The properties that are not appeared in the request keep their values.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewTemplateEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RespDTO"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "templates"
        ],
        "summary": "Delete a template event",
        "description": "Delete a template event by its ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "templateEventId",
            "in": "path",
            "description": "The ID of the template event.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/RespDTO"
            }
          }
        }
      }
    },
    "/templates/types": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Get all the template types",
        "description": "Get all the available template type objects.\nThe `id` of these objects are used for new template event creation or template event modificaction.\nThe `templateType` is used for querying certain type of templae events.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TemplateType"
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "TemplateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "eventName": {
          "type": "string"
        },
        "templateType": {
          "type": "string"
        },
        "weekNumBer": {
          "type": "integer"
        },
        "dayNumber": {
          "type": "integer"
        },
        "startsAt": {
          "$ref": "#/definitions/EventTime"
        },
        "endsAt": {
          "$ref": "#/definitions/EventTime"
        }
      }
    },
    "NewTemplateEvent": {
      "type": "object",
      "properties": {
        "eventName": {
          "type": "string"
        },
        "templateTypeId": {
          "type": "integer"
        },
        "weekNumber": {
          "type": "integer"
        },
        "dayNumber": {
          "type": "integer"
        },
        "startsAt": {
          "$ref": "#/definitions/EventTime"
        },
        "endsAt": {
          "$ref": "#/definitions/EventTime"
        }
      }
    },
    "TemplateType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "templateType": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "eventName": {
          "type": "string"
        },
        "startsAt": {
          "$ref": "#/definitions/EventTime"
        },
        "endsAt": {
          "$ref": "#/definitions/EventTime"
        },
        "calendarEventId": {
          "type": "string"
        },
        "guestGroup": {
          "type": "string"
        }
      }
    },
    "NewEvent": {
      "type": "object",
      "properties": {
        "eventName": {
          "type": "string"
        },
        "startsAt": {
          "$ref": "#/definitions/EventTime"
        },
        "endsAt": {
          "$ref": "#/definitions/EventTime"
        }
      }
    },
    "EventTime": {
      "type": "object",
      "properties": {
        "dateTime": {
          "type": "string",
          "format": "datetime"
        },
        "timeZone": {
          "type": "string"
        }
      }
    },
    "ResponseDTO": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}